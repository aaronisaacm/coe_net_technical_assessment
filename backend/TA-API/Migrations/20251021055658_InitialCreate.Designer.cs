// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TA_API.Services.Data;

#nullable disable

namespace TA_API.Migrations
{
    [DbContext(typeof(AssessmentDbContext))]
    [Migration("20251021055658_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.5");

            modelBuilder.Entity("TA_API.Models.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("BookName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.HasKey("BookId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            Author = "Robert C. Martin",
                            BookName = "Clean Code",
                            Description = "A handbook of agile software craftsmanship"
                        },
                        new
                        {
                            BookId = 2,
                            Author = "Gang of Four",
                            BookName = "Design Patterns",
                            Description = "Elements of reusable object-oriented software"
                        },
                        new
                        {
                            BookId = 3,
                            Author = "Andrew Hunt, David Thomas",
                            BookName = "The Pragmatic Programmer",
                            Description = "Your journey to mastery"
                        },
                        new
                        {
                            BookId = 4,
                            Author = "Martin Fowler",
                            BookName = "Refactoring",
                            Description = "Improving the design of existing code"
                        },
                        new
                        {
                            BookId = 5,
                            Author = "Frederick Brooks",
                            BookName = "The Mythical Man-Month",
                            Description = "Essays on software engineering"
                        },
                        new
                        {
                            BookId = 6,
                            Author = "Steve McConnell",
                            BookName = "Code Complete",
                            Description = "A practical handbook of software construction"
                        },
                        new
                        {
                            BookId = 7,
                            Author = "Eric Evans",
                            BookName = "Domain-Driven Design",
                            Description = "Tackling complexity in the heart of software"
                        },
                        new
                        {
                            BookId = 8,
                            Author = "Thomas H. Cormen",
                            BookName = "Introduction to Algorithms",
                            Description = "Comprehensive algorithms textbook"
                        });
                });

            modelBuilder.Entity("TA_API.Models.BookLoan", b =>
                {
                    b.Property<int>("BookLoanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BookId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsReturned")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LoanDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("PersonId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("TEXT");

                    b.HasKey("BookLoanId");

                    b.HasIndex("BookId");

                    b.HasIndex("PersonId");

                    b.ToTable("BookLoans");

                    b.HasData(
                        new
                        {
                            BookLoanId = 1,
                            BookId = 1,
                            DueDate = new DateTime(2025, 10, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsReturned = false,
                            LoanDate = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonId = 1
                        },
                        new
                        {
                            BookLoanId = 2,
                            BookId = 3,
                            DueDate = new DateTime(2025, 11, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsReturned = false,
                            LoanDate = new DateTime(2025, 10, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonId = 2
                        },
                        new
                        {
                            BookLoanId = 3,
                            BookId = 5,
                            DueDate = new DateTime(2025, 11, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsReturned = false,
                            LoanDate = new DateTime(2025, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonId = 3
                        },
                        new
                        {
                            BookLoanId = 4,
                            BookId = 2,
                            DueDate = new DateTime(2025, 9, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsReturned = true,
                            LoanDate = new DateTime(2025, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonId = 1,
                            ReturnDate = new DateTime(2025, 9, 25, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BookLoanId = 5,
                            BookId = 4,
                            DueDate = new DateTime(2025, 10, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsReturned = true,
                            LoanDate = new DateTime(2025, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonId = 4,
                            ReturnDate = new DateTime(2025, 10, 5, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BookLoanId = 6,
                            BookId = 6,
                            DueDate = new DateTime(2025, 9, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsReturned = true,
                            LoanDate = new DateTime(2025, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonId = 5,
                            ReturnDate = new DateTime(2025, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BookLoanId = 7,
                            BookId = 7,
                            DueDate = new DateTime(2025, 9, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsReturned = true,
                            LoanDate = new DateTime(2025, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonId = 2,
                            ReturnDate = new DateTime(2025, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BookLoanId = 8,
                            BookId = 8,
                            DueDate = new DateTime(2025, 10, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsReturned = false,
                            LoanDate = new DateTime(2025, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonId = 4
                        });
                });

            modelBuilder.Entity("TA_API.Models.Person", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("PersonId");

                    b.ToTable("People");

                    b.HasData(
                        new
                        {
                            PersonId = 1,
                            LastName = "Isaac",
                            Name = "Aaron"
                        },
                        new
                        {
                            PersonId = 2,
                            LastName = "Smith",
                            Name = "John"
                        },
                        new
                        {
                            PersonId = 3,
                            LastName = "Johnson",
                            Name = "Emma"
                        },
                        new
                        {
                            PersonId = 4,
                            LastName = "Williams",
                            Name = "Michael"
                        },
                        new
                        {
                            PersonId = 5,
                            LastName = "Brown",
                            Name = "Sarah"
                        });
                });

            modelBuilder.Entity("TA_API.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TA_API.Models.BookLoan", b =>
                {
                    b.HasOne("TA_API.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TA_API.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Person");
                });
#pragma warning restore 612, 618
        }
    }
}
